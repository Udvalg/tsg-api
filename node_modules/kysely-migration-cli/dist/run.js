"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const fs_1 = __importDefault(require("fs"));
const commander_1 = require("commander");
const kysely_1 = require("kysely");
function showResults({ error, results }) {
    if (results) {
        results.forEach((it) => console.log(`> ${it.status}: ${it.migrationName} (${it.direction})`));
        if (results.length === 0) {
            console.log('> No pending migrations to execute');
        }
    }
    if (error) {
        console.error(error);
        process.exit(1);
    }
}
function run(db, migrator, path = './migrations') {
    commander_1.program
        .command('up')
        .description('Run a pending migration if any')
        .action(() => __awaiter(this, void 0, void 0, function* () {
        console.log('Running single migration');
        const results = yield migrator.migrateUp();
        showResults(results);
    }));
    commander_1.program
        .command('down')
        .description('Revert the latest migration with a down file')
        .action(() => __awaiter(this, void 0, void 0, function* () {
        console.log('Reverting migrations');
        const results = yield migrator.migrateDown();
        showResults(results);
    }));
    commander_1.program
        .command('redo')
        .description('Down and Up')
        .action(() => __awaiter(this, void 0, void 0, function* () {
        console.log('Reverting migrations');
        let results = yield migrator.migrateDown();
        showResults(results);
        console.log('Running single migration');
        results = yield migrator.migrateUp();
        showResults(results);
    }));
    commander_1.program
        .command('latest')
        .description('Run all pending migrations')
        .action(() => __awaiter(this, void 0, void 0, function* () {
        console.log('Running migrations');
        const results = yield migrator.migrateToLatest();
        showResults(results);
    }));
    commander_1.program
        .command('down-to')
        .argument('<migration-name>')
        .description('Migrates down to the specified migration name. Specify "NO_MIGRATIONS" to migrate all the way down.')
        .action((name) => __awaiter(this, void 0, void 0, function* () {
        let results;
        if (name === 'NO_MIGRATIONS') {
            console.log(`Migrating all the way down`);
            results = yield migrator.migrateTo(kysely_1.NO_MIGRATIONS);
        }
        else {
            console.log(`Migrating down to ${name}`);
            results = yield migrator.migrateTo(name);
        }
        showResults(results);
    }));
    commander_1.program
        .command('create')
        .argument('<input-file>')
        .description('Create a new migration with the given description, and the current time as the version')
        .action((name) => __awaiter(this, void 0, void 0, function* () {
        const dateStr = new Date()
            .toISOString()
            .replace(/[-:]/g, '')
            .split('.')[0];
        const fileName = `${path}/${dateStr}-${name}.ts`;
        const mkdir = () => fs_1.default.mkdirSync(path);
        try {
            if (!fs_1.default.lstatSync(path).isDirectory()) {
                mkdir();
            }
        }
        catch (_a) {
            fs_1.default.mkdirSync(path);
        }
        fs_1.default.writeFileSync(fileName, TEMPLATE, 'utf8');
        console.log('Created Migration:', fileName);
    }));
    commander_1.program.parseAsync().then(() => db.destroy());
}
exports.run = run;
const TEMPLATE = `import { Kysely } from 'kysely'

export async function up(db: Kysely<any>): Promise<void> {
}

export async function down(db: Kysely<any>): Promise<void> {
}
`;
//# sourceMappingURL=run.js.map